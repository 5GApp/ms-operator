// Copyright 2020 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "gitee.com/mindspore/ms-operator/pkg/apis/mindspore/v1"
	scheme "gitee.com/mindspore/ms-operator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MSJobsGetter has a method to return a MSJobInterface.
// A group's client should implement this interface.
type MSJobsGetter interface {
	MSJobs(namespace string) MSJobInterface
}

// MSJobInterface has methods to work with MSJob resources.
type MSJobInterface interface {
	Create(*v1.MSJob) (*v1.MSJob, error)
	Update(*v1.MSJob) (*v1.MSJob, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.MSJob, error)
	List(opts metav1.ListOptions) (*v1.MSJobList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.MSJob, err error)
	MSJobExpansion
}

// mSJobs implements MSJobInterface
type mSJobs struct {
	client rest.Interface
	ns     string
}

// newMSJobs returns a MSJobs
func newMSJobs(c *KubeflowV1Client, namespace string) *mSJobs {
	return &mSJobs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the mSJob, and returns the corresponding mSJob object, and an error if there is any.
func (c *mSJobs) Get(name string, options metav1.GetOptions) (result *v1.MSJob, err error) {
	result = &v1.MSJob{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("msjobs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MSJobs that match those selectors.
func (c *mSJobs) List(opts metav1.ListOptions) (result *v1.MSJobList, err error) {
	result = &v1.MSJobList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("msjobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested mSJobs.
func (c *mSJobs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("msjobs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a mSJob and creates it.  Returns the server's representation of the mSJob, and an error, if there is any.
func (c *mSJobs) Create(mSJob *v1.MSJob) (result *v1.MSJob, err error) {
	result = &v1.MSJob{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("msjobs").
		Body(mSJob).
		Do().
		Into(result)
	return
}

// Update takes the representation of a mSJob and updates it. Returns the server's representation of the mSJob, and an error, if there is any.
func (c *mSJobs) Update(mSJob *v1.MSJob) (result *v1.MSJob, err error) {
	result = &v1.MSJob{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("msjobs").
		Name(mSJob.Name).
		Body(mSJob).
		Do().
		Into(result)
	return
}

// Delete takes name of the mSJob and deletes it. Returns an error if one occurs.
func (c *mSJobs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("msjobs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *mSJobs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("msjobs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched mSJob.
func (c *mSJobs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.MSJob, err error) {
	result = &v1.MSJob{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("msjobs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
